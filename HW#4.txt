module BCD(clk, rst_asyn, Q_out);
input clk; //I clock in
input rst_asyn; //I asyn reset
output [3:0] Q_out; // O asyn Result
reg [3:0] Q_out;

always@ (posedge clk or posedge rst_asyn)
 begin
   if (rst_asyn) //reset
        Q_out = 0;
   else if (Q_out == 9) 
        Q_out = 0;
   else            
        Q_out = Q_out+1;
 end
endmodule




`timescale 1ns/1ps
module RTL_tb;
    reg clk;
    reg rst_asyn;
	  wire  [3:0] Q_out;
    parameter OFFSET = 0;

// clock process
initial
begin
    #OFFSET;
    forever
    begin
        clk = 1'b0;
        #2 clk = 1'b1;
        #2;
    end
end

// reset process
initial
begin
    #OFFSET;
    forever
    begin
        rst_asyn = 1'b1;
        #5   rst_asyn = 1'b0;
        #50;
    end
end

// clock & reset finish
initial begin
        #60 $finish;
end

initial begin
	$dumpfile("RTL.vcd");
	$dumpvars(0, RTL_tb);
end
BCD RTL_tb(.clk, .rst_asyn, .Q_out);
endmodule